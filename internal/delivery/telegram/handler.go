package telegram

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/polyk005/tg_bot/internal/domain"
	"github.com/polyk005/tg_bot/internal/service"
	"github.com/polyk005/tg_bot/pkg/logger"
)

// UserState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
type UserState struct {
	CurrentDay     time.Weekday
	CurrentStep    int // 0 - –æ–∂–∏–¥–∞–Ω–∏–µ –¥–Ω—è, 1 - –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, 2 - –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
	ScheduleInput  map[time.Weekday][]domain.Lesson
	CurrentWeekNum int // 1 - —á–∏—Å–ª–∏—Ç–µ–ª—å, 2 - –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
}

var userStates = make(map[int64]*UserState)

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
func getCurrentWeekNumber() int {
	_, week := time.Now().ISOWeek()
	if week%2 == 0 {
		return 2 // –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
	}
	return 1 // –ß–∏—Å–ª–∏—Ç–µ–ª—å
}

// RegisterHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
func RegisterHandlers(b *bot.Bot, svc *service.Service, log logger.Logger) {
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	b.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, startHandler(svc, log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/help", bot.MatchTypeExact, helpHandler(log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/setschedule", bot.MatchTypeExact, setScheduleHandler(svc, log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/schedule", bot.MatchTypeExact, scheduleHandler(svc, log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/ask", bot.MatchTypePrefix, askHandler(svc, log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/cancel", bot.MatchTypeExact, cancelHandler(log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/today", bot.MatchTypeExact, todayHandler(svc, log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/tomorrow", bot.MatchTypeExact, tomorrowHandler(svc, log))
	b.RegisterHandler(bot.HandlerTypeMessageText, "/week", bot.MatchTypeExact, weekHandler(svc, log))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞)
	b.RegisterHandler(bot.HandlerTypeMessageText, "", bot.MatchTypeContains, textMessageHandler(svc, log))
}

// startHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func startHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID

		if err := svc.ProcessStartCommand(ctx, userID); err != nil {
			log.Errorw("Failed to process start command", "error", err, "userID", userID)
			sendErrorMessage(b, ctx, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		currentWeek := getCurrentWeekNumber()
		weekName := "—á–∏—Å–ª–∏—Ç–µ–ª—å"
		if currentWeek == 2 {
			weekName = "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
		}

		msg := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. 
–°–µ–π—á–∞—Å %d-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è (%s).

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/setschedule - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
/ask [–≤–æ–ø—Ä–æ—Å] - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–ø–æ–º–æ—â–Ω–∏–∫—É`, currentWeek, weekName)

		if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   msg,
		}); err != nil {
			log.Errorw("Failed to send welcome message", "error", err, "chatID", chatID)
		}
	}
}

// setScheduleHandler –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func setScheduleHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userStates[userID] = &UserState{
			ScheduleInput: make(map[time.Weekday][]domain.Lesson),
		}

		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text: "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')\n" +
				"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
			ReplyMarkup: weekdayKeyboard(),
		})
		if err != nil {
			log.Errorw("Failed to send schedule instructions", "error", err)
		}
	}
}

// cancelHandler –æ—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func cancelHandler(log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID

		delete(userStates, userID)

		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "‚ùå –í–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω",
		})
		if err != nil {
			log.Errorw("Failed to send cancel message", "error", err)
		}
	}
}

// textMessageHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func textMessageHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID
		text := update.Message.Text

		state, exists := userStates[userID]
		if !exists {
			return // –ù–µ –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		}

		switch state.CurrentStep {
		case 0: // –û–∂–∏–¥–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
			day, err := parseWeekday(text)
			if err != nil {
				_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID:      chatID,
					Text:        "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
					ReplyMarkup: weekdayKeyboard(),
				})
				return
			}

			state.CurrentDay = day
			state.CurrentStep = 1

			_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: fmt.Sprintf("üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—ã –¥–ª—è %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"+
					"<–ù–∞–∑–≤–∞–Ω–∏–µ> | <–ù–∞—á–∞–ª–æ> | <–ö–æ–Ω–µ—Ü> | <–ê—É–¥–∏—Ç–æ—Ä–∏—è> | <–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å>\n\n"+
					"–ü—Ä–∏–º–µ—Ä:\n"+
					"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | 09:00 | 10:30 | –ê—É–¥. 101 | –ò–≤–∞–Ω–æ–≤ –ò.–ò.\n\n"+
					"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done", russianWeekday(day)),
			})

		case 1: // –û–∂–∏–¥–∞–µ–º –ø–∞—Ä—ã
			if text == "/done" {
				// –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
				_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text: fmt.Sprintf("–î–µ–Ω—å %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å? (–¥–∞/–Ω–µ—Ç)",
						russianWeekday(state.CurrentDay)),
				})
				state.CurrentStep = 2 // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
				return
			}

			lesson, err := parseLesson(text)
			if err != nil {
				_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞—á–∞–ª–æ | –ö–æ–Ω–µ—Ü | –ê—É–¥–∏—Ç–æ—Ä–∏—è | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
				})
				return
			}

			state.ScheduleInput[state.CurrentDay] = append(state.ScheduleInput[state.CurrentDay], lesson)
			_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "‚úÖ –ü–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
			})

		case 2: // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
			if strings.ToLower(text) == "–¥–∞" {
				state.CurrentStep = 0
				_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID:      chatID,
					Text:        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
					ReplyMarkup: weekdayKeyboard(),
				})
			} else {
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
				for day, lessons := range state.ScheduleInput {
					svc.SaveSchedule(ctx, userID, day, lessons)
				}

				delete(userStates, userID)

				_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
				})
			}
		}
	}
}

// todayHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /today
func todayHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		handleDaySchedule(ctx, b, update, svc, log, time.Now().Weekday())
	}
}

// tomorrowHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tomorrow
func tomorrowHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		handleDaySchedule(ctx, b, update, svc, log, time.Now().Add(24*time.Hour).Weekday())
	}
}

// weekHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /week
func weekHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		chatID := update.Message.Chat.ID
		userID := update.Message.From.ID

		var sb strings.Builder
		sb.WriteString("üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n")

		for day := time.Monday; day <= time.Friday; day++ {
			lessons, err := svc.GetSchedule(ctx, userID, day)
			if err != nil {
				log.Errorw("Failed to get schedule", "error", err, "userID", userID, "day", day)
				continue
			}

			sb.WriteString(fmt.Sprintf("üìå %s:\n", russianWeekday(day)))

			if len(lessons) == 0 {
				sb.WriteString("    –ü–∞—Ä –Ω–µ—Ç\n\n")
				continue
			}

			for _, lesson := range lessons {
				sb.WriteString(fmt.Sprintf("    üïí %s-%s %s\n",
					lesson.StartTime.Format("15:04"),
					lesson.EndTime.Format("15:04"),
					lesson.Name))
			}
			sb.WriteString("\n")
		}

		if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   sb.String(),
		}); err != nil {
			log.Errorw("Failed to send week schedule", "error", err, "chatID", chatID)
		}
	}
}

// handleDaySchedule –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
func handleDaySchedule(ctx context.Context, b *bot.Bot, update *models.Update, svc *service.Service, log logger.Logger, day time.Weekday) {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID

	lessons, err := svc.GetSchedule(ctx, userID, day)
	if err != nil {
		log.Errorw("Failed to get schedule", "error", err, "userID", userID, "day", day)
		sendErrorMessage(b, ctx, chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if len(lessons) == 0 {
		if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   fmt.Sprintf("–ù–∞ %s –ø–∞—Ä –Ω–µ—Ç üéâ", russianWeekday(day)),
		}); err != nil {
			log.Errorw("Failed to send empty schedule message", "error", err, "chatID", chatID)
		}
		return
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s:\n\n", russianWeekday(day)))

	for i, lesson := range lessons {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, lesson.Name))
		sb.WriteString(fmt.Sprintf("   üïí %s - %s\n", lesson.StartTime.Format("15:04"), lesson.EndTime.Format("15:04")))
		if lesson.Location != "" {
			sb.WriteString(fmt.Sprintf("   üè´ %s\n", lesson.Location))
		}
		if lesson.Teacher != "" {
			sb.WriteString(fmt.Sprintf("   üë®‚Äçüè´ %s\n", lesson.Teacher))
		}
		sb.WriteString("\n")
	}

	if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   sb.String(),
	}); err != nil {
		log.Errorw("Failed to send schedule message", "error", err, "chatID", chatID)
	}
}

// helpHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func helpHandler(log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		chatID := update.Message.Chat.ID

		msg := `‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/setschedule - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/week - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–ø–æ–º–æ—â–Ω–∏–∫—É`

		if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   msg,
		}); err != nil {
			log.Errorw("Failed to send help message", "error", err, "chatID", chatID)
		}
	}
}

// askHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ask
func askHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		chatID := update.Message.Chat.ID
		question := strings.TrimPrefix(update.Message.Text, "/ask ")

		if question == "" {
			sendErrorMessage(b, ctx, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
			return
		}

		answer, err := svc.ProcessAIQuestion(ctx, question)
		if err != nil {
			log.Errorw("Failed to process AI question", "error", err, "question", question)
			sendErrorMessage(b, ctx, chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
			return
		}

		if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   answer,
		}); err != nil {
			log.Errorw("Failed to send AI answer", "error", err, "chatID", chatID)
		}
	}
}

// scheduleHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /schedule (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞)
func scheduleHandler(svc *service.Service, log logger.Logger) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		chatID := update.Message.Chat.ID

		kb := &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–°–µ–≥–æ–¥–Ω—è", CallbackData: "schedule_today"},
					{Text: "–ó–∞–≤—Ç—Ä–∞", CallbackData: "schedule_tomorrow"},
				},
				{
					{Text: "–í—Å—è –Ω–µ–¥–µ–ª—è", CallbackData: "schedule_week"},
				},
			},
		}

		if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
			ReplyMarkup: kb,
		}); err != nil {
			log.Errorw("Failed to send schedule menu", "error", err, "chatID", chatID)
		}
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// weekdayKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
func weekdayKeyboard() *models.ReplyKeyboardMarkup {
	return &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
				{Text: "–í—Ç–æ—Ä–Ω–∏–∫"},
				{Text: "–°—Ä–µ–¥–∞"},
			},
			{
				{Text: "–ß–µ—Ç–≤–µ—Ä–≥"},
				{Text: "–ü—è—Ç–Ω–∏—Ü–∞"},
				{Text: "–°—É–±–±–æ—Ç–∞"},
			},
			{
				{Text: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"},
				{Text: "/cancel"},
			},
		},
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}
}

// parseWeekday –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
func parseWeekday(text string) (time.Weekday, error) {
	switch strings.ToLower(text) {
	case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
		return time.Monday, nil
	case "–≤—Ç–æ—Ä–Ω–∏–∫":
		return time.Tuesday, nil
	case "—Å—Ä–µ–¥–∞":
		return time.Wednesday, nil
	case "—á–µ—Ç–≤–µ—Ä–≥":
		return time.Thursday, nil
	case "–ø—è—Ç–Ω–∏—Ü–∞":
		return time.Friday, nil
	case "—Å—É–±–±–æ—Ç–∞":
		return time.Saturday, nil
	case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
		return time.Sunday, nil
	default:
		return time.Sunday, fmt.Errorf("invalid weekday")
	}
}

// parseLesson —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
func parseLesson(text string) (domain.Lesson, error) {
	parts := strings.Split(text, "|")
	if len(parts) != 5 {
		return domain.Lesson{}, fmt.Errorf("invalid format")
	}

	startTime, err := time.Parse("15:04", strings.TrimSpace(parts[1]))
	if err != nil {
		return domain.Lesson{}, err
	}

	endTime, err := time.Parse("15:04", strings.TrimSpace(parts[2]))
	if err != nil {
		return domain.Lesson{}, err
	}

	return domain.Lesson{
		Name:      strings.TrimSpace(parts[0]),
		StartTime: startTime,
		EndTime:   endTime,
		Location:  strings.TrimSpace(parts[3]),
		Teacher:   strings.TrimSpace(parts[4]),
	}, nil
}

// russianWeekday –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
func russianWeekday(day time.Weekday) string {
	days := map[time.Weekday]string{
		time.Monday:    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		time.Tuesday:   "–í—Ç–æ—Ä–Ω–∏–∫",
		time.Wednesday: "–°—Ä–µ–¥–∞",
		time.Thursday:  "–ß–µ—Ç–≤–µ—Ä–≥",
		time.Friday:    "–ü—è—Ç–Ω–∏—Ü–∞",
		time.Saturday:  "–°—É–±–±–æ—Ç–∞",
		time.Sunday:    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	}
	return days[day]
}

// sendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func sendErrorMessage(b *bot.Bot, ctx context.Context, chatID int64, text string) {
	if _, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "‚ùå " + text,
	}); err != nil {
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
		// –∑–¥–µ—Å—å —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–µ–ª–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
	}
}
